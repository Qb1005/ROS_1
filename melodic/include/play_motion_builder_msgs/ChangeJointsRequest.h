// Generated by gencpp from file play_motion_builder_msgs/ChangeJointsRequest.msg
// DO NOT EDIT!


#ifndef PLAY_MOTION_BUILDER_MSGS_MESSAGE_CHANGEJOINTSREQUEST_H
#define PLAY_MOTION_BUILDER_MSGS_MESSAGE_CHANGEJOINTSREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace play_motion_builder_msgs
{
template <class ContainerAllocator>
struct ChangeJointsRequest_
{
  typedef ChangeJointsRequest_<ContainerAllocator> Type;

  ChangeJointsRequest_()
    : group()
    , joints_to_remove()
    , joints_to_add()  {
    }
  ChangeJointsRequest_(const ContainerAllocator& _alloc)
    : group(_alloc)
    , joints_to_remove(_alloc)
    , joints_to_add(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _group_type;
  _group_type group;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _joints_to_remove_type;
  _joints_to_remove_type joints_to_remove;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _joints_to_add_type;
  _joints_to_add_type joints_to_add;





  typedef boost::shared_ptr< ::play_motion_builder_msgs::ChangeJointsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::play_motion_builder_msgs::ChangeJointsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ChangeJointsRequest_

typedef ::play_motion_builder_msgs::ChangeJointsRequest_<std::allocator<void> > ChangeJointsRequest;

typedef boost::shared_ptr< ::play_motion_builder_msgs::ChangeJointsRequest > ChangeJointsRequestPtr;
typedef boost::shared_ptr< ::play_motion_builder_msgs::ChangeJointsRequest const> ChangeJointsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::play_motion_builder_msgs::ChangeJointsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::play_motion_builder_msgs::ChangeJointsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::play_motion_builder_msgs::ChangeJointsRequest_<ContainerAllocator1> & lhs, const ::play_motion_builder_msgs::ChangeJointsRequest_<ContainerAllocator2> & rhs)
{
  return lhs.group == rhs.group &&
    lhs.joints_to_remove == rhs.joints_to_remove &&
    lhs.joints_to_add == rhs.joints_to_add;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::play_motion_builder_msgs::ChangeJointsRequest_<ContainerAllocator1> & lhs, const ::play_motion_builder_msgs::ChangeJointsRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace play_motion_builder_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::play_motion_builder_msgs::ChangeJointsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::play_motion_builder_msgs::ChangeJointsRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::play_motion_builder_msgs::ChangeJointsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::play_motion_builder_msgs::ChangeJointsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::play_motion_builder_msgs::ChangeJointsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::play_motion_builder_msgs::ChangeJointsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::play_motion_builder_msgs::ChangeJointsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "973a28a7a5f5fe66851191cc72cc5580";
  }

  static const char* value(const ::play_motion_builder_msgs::ChangeJointsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x973a28a7a5f5fe66ULL;
  static const uint64_t static_value2 = 0x851191cc72cc5580ULL;
};

template<class ContainerAllocator>
struct DataType< ::play_motion_builder_msgs::ChangeJointsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "play_motion_builder_msgs/ChangeJointsRequest";
  }

  static const char* value(const ::play_motion_builder_msgs::ChangeJointsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::play_motion_builder_msgs::ChangeJointsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Empty if group shouldn't be changed, name of the group otherwise\n"
"string group\n"
"# List of joints not in a group to be removed from the motion\n"
"string[] joints_to_remove\n"
"# List of joints not in a group to be added to a motion\n"
"string[] joints_to_add\n"
;
  }

  static const char* value(const ::play_motion_builder_msgs::ChangeJointsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::play_motion_builder_msgs::ChangeJointsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.group);
      stream.next(m.joints_to_remove);
      stream.next(m.joints_to_add);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ChangeJointsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::play_motion_builder_msgs::ChangeJointsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::play_motion_builder_msgs::ChangeJointsRequest_<ContainerAllocator>& v)
  {
    s << indent << "group: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.group);
    s << indent << "joints_to_remove[]" << std::endl;
    for (size_t i = 0; i < v.joints_to_remove.size(); ++i)
    {
      s << indent << "  joints_to_remove[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.joints_to_remove[i]);
    }
    s << indent << "joints_to_add[]" << std::endl;
    for (size_t i = 0; i < v.joints_to_add.size(); ++i)
    {
      s << indent << "  joints_to_add[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.joints_to_add[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLAY_MOTION_BUILDER_MSGS_MESSAGE_CHANGEJOINTSREQUEST_H
