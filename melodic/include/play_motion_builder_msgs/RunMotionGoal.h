// Generated by gencpp from file play_motion_builder_msgs/RunMotionGoal.msg
// DO NOT EDIT!


#ifndef PLAY_MOTION_BUILDER_MSGS_MESSAGE_RUNMOTIONGOAL_H
#define PLAY_MOTION_BUILDER_MSGS_MESSAGE_RUNMOTIONGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace play_motion_builder_msgs
{
template <class ContainerAllocator>
struct RunMotionGoal_
{
  typedef RunMotionGoal_<ContainerAllocator> Type;

  RunMotionGoal_()
    : run_mode(0)
    , downshift(0.0)
    , step_id(0)  {
    }
  RunMotionGoal_(const ContainerAllocator& _alloc)
    : run_mode(0)
    , downshift(0.0)
    , step_id(0)  {
  (void)_alloc;
    }



   typedef uint8_t _run_mode_type;
  _run_mode_type run_mode;

   typedef float _downshift_type;
  _downshift_type downshift;

   typedef uint16_t _step_id_type;
  _step_id_type step_id;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(RUN_MOTION)
  #undef RUN_MOTION
#endif
#if defined(_WIN32) && defined(GO_TO_STEP)
  #undef GO_TO_STEP
#endif

  enum {
    RUN_MOTION = 0u,
    GO_TO_STEP = 1u,
  };


  typedef boost::shared_ptr< ::play_motion_builder_msgs::RunMotionGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::play_motion_builder_msgs::RunMotionGoal_<ContainerAllocator> const> ConstPtr;

}; // struct RunMotionGoal_

typedef ::play_motion_builder_msgs::RunMotionGoal_<std::allocator<void> > RunMotionGoal;

typedef boost::shared_ptr< ::play_motion_builder_msgs::RunMotionGoal > RunMotionGoalPtr;
typedef boost::shared_ptr< ::play_motion_builder_msgs::RunMotionGoal const> RunMotionGoalConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::play_motion_builder_msgs::RunMotionGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::play_motion_builder_msgs::RunMotionGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::play_motion_builder_msgs::RunMotionGoal_<ContainerAllocator1> & lhs, const ::play_motion_builder_msgs::RunMotionGoal_<ContainerAllocator2> & rhs)
{
  return lhs.run_mode == rhs.run_mode &&
    lhs.downshift == rhs.downshift &&
    lhs.step_id == rhs.step_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::play_motion_builder_msgs::RunMotionGoal_<ContainerAllocator1> & lhs, const ::play_motion_builder_msgs::RunMotionGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace play_motion_builder_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::play_motion_builder_msgs::RunMotionGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::play_motion_builder_msgs::RunMotionGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::play_motion_builder_msgs::RunMotionGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::play_motion_builder_msgs::RunMotionGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::play_motion_builder_msgs::RunMotionGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::play_motion_builder_msgs::RunMotionGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::play_motion_builder_msgs::RunMotionGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "93fd2cd7e64669cfb4a792f5ad9e13ef";
  }

  static const char* value(const ::play_motion_builder_msgs::RunMotionGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x93fd2cd7e64669cfULL;
  static const uint64_t static_value2 = 0xb4a792f5ad9e13efULL;
};

template<class ContainerAllocator>
struct DataType< ::play_motion_builder_msgs::RunMotionGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "play_motion_builder_msgs/RunMotionGoal";
  }

  static const char* value(const ::play_motion_builder_msgs::RunMotionGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::play_motion_builder_msgs::RunMotionGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Motion modes\n"
"uint8 RUN_MOTION=0\n"
"uint8 GO_TO_STEP=1\n"
"\n"
"uint8 run_mode\n"
"# Factor by which to slow down the motion (only used if run_mode is RUN_MOTION)\n"
"float32 downshift\n"
"# Step id to which the robot will be moved (only used if run_mode is GO_TO_STEP)\n"
"uint16 step_id\n"
;
  }

  static const char* value(const ::play_motion_builder_msgs::RunMotionGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::play_motion_builder_msgs::RunMotionGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.run_mode);
      stream.next(m.downshift);
      stream.next(m.step_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RunMotionGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::play_motion_builder_msgs::RunMotionGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::play_motion_builder_msgs::RunMotionGoal_<ContainerAllocator>& v)
  {
    s << indent << "run_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.run_mode);
    s << indent << "downshift: ";
    Printer<float>::stream(s, indent + "  ", v.downshift);
    s << indent << "step_id: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.step_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLAY_MOTION_BUILDER_MSGS_MESSAGE_RUNMOTIONGOAL_H
