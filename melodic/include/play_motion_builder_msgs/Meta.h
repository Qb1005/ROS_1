// Generated by gencpp from file play_motion_builder_msgs/Meta.msg
// DO NOT EDIT!


#ifndef PLAY_MOTION_BUILDER_MSGS_MESSAGE_META_H
#define PLAY_MOTION_BUILDER_MSGS_MESSAGE_META_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace play_motion_builder_msgs
{
template <class ContainerAllocator>
struct Meta_
{
  typedef Meta_<ContainerAllocator> Type;

  Meta_()
    : name()
    , usage()
    , description()  {
    }
  Meta_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , usage(_alloc)
    , description(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _usage_type;
  _usage_type usage;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _description_type;
  _description_type description;





  typedef boost::shared_ptr< ::play_motion_builder_msgs::Meta_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::play_motion_builder_msgs::Meta_<ContainerAllocator> const> ConstPtr;

}; // struct Meta_

typedef ::play_motion_builder_msgs::Meta_<std::allocator<void> > Meta;

typedef boost::shared_ptr< ::play_motion_builder_msgs::Meta > MetaPtr;
typedef boost::shared_ptr< ::play_motion_builder_msgs::Meta const> MetaConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::play_motion_builder_msgs::Meta_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::play_motion_builder_msgs::Meta_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::play_motion_builder_msgs::Meta_<ContainerAllocator1> & lhs, const ::play_motion_builder_msgs::Meta_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.usage == rhs.usage &&
    lhs.description == rhs.description;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::play_motion_builder_msgs::Meta_<ContainerAllocator1> & lhs, const ::play_motion_builder_msgs::Meta_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace play_motion_builder_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::play_motion_builder_msgs::Meta_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::play_motion_builder_msgs::Meta_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::play_motion_builder_msgs::Meta_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::play_motion_builder_msgs::Meta_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::play_motion_builder_msgs::Meta_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::play_motion_builder_msgs::Meta_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::play_motion_builder_msgs::Meta_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3d2fb11fee090a7161bc0fcadb79cc50";
  }

  static const char* value(const ::play_motion_builder_msgs::Meta_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3d2fb11fee090a71ULL;
  static const uint64_t static_value2 = 0x61bc0fcadb79cc50ULL;
};

template<class ContainerAllocator>
struct DataType< ::play_motion_builder_msgs::Meta_<ContainerAllocator> >
{
  static const char* value()
  {
    return "play_motion_builder_msgs/Meta";
  }

  static const char* value(const ::play_motion_builder_msgs::Meta_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::play_motion_builder_msgs::Meta_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Human-readable name for the motion\n"
"string name\n"
"# Keywords to identify purpose of the motion\n"
"string usage\n"
"# Short description of the motion\n"
"string description\n"
;
  }

  static const char* value(const ::play_motion_builder_msgs::Meta_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::play_motion_builder_msgs::Meta_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.usage);
      stream.next(m.description);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Meta_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::play_motion_builder_msgs::Meta_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::play_motion_builder_msgs::Meta_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "usage: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.usage);
    s << indent << "description: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.description);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLAY_MOTION_BUILDER_MSGS_MESSAGE_META_H
