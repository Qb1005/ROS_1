// Generated by gencpp from file play_motion_builder_msgs/EditMotionRequest.msg
// DO NOT EDIT!


#ifndef PLAY_MOTION_BUILDER_MSGS_MESSAGE_EDITMOTIONREQUEST_H
#define PLAY_MOTION_BUILDER_MSGS_MESSAGE_EDITMOTIONREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace play_motion_builder_msgs
{
template <class ContainerAllocator>
struct EditMotionRequest_
{
  typedef EditMotionRequest_<ContainerAllocator> Type;

  EditMotionRequest_()
    : step_id(0)
    , action(0)
    , time(0.0)  {
    }
  EditMotionRequest_(const ContainerAllocator& _alloc)
    : step_id(0)
    , action(0)
    , time(0.0)  {
  (void)_alloc;
    }



   typedef uint16_t _step_id_type;
  _step_id_type step_id;

   typedef uint8_t _action_type;
  _action_type action;

   typedef float _time_type;
  _time_type time;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(LIST)
  #undef LIST
#endif
#if defined(_WIN32) && defined(APPEND)
  #undef APPEND
#endif
#if defined(_WIN32) && defined(EDIT)
  #undef EDIT
#endif
#if defined(_WIN32) && defined(COPY_AS_NEXT)
  #undef COPY_AS_NEXT
#endif
#if defined(_WIN32) && defined(COPY_AS_LAST)
  #undef COPY_AS_LAST
#endif
#if defined(_WIN32) && defined(REMOVE)
  #undef REMOVE
#endif
#if defined(_WIN32) && defined(EDIT_TIME)
  #undef EDIT_TIME
#endif

  enum {
    LIST = 0u,
    APPEND = 1u,
    EDIT = 2u,
    COPY_AS_NEXT = 3u,
    COPY_AS_LAST = 4u,
    REMOVE = 5u,
    EDIT_TIME = 6u,
  };


  typedef boost::shared_ptr< ::play_motion_builder_msgs::EditMotionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::play_motion_builder_msgs::EditMotionRequest_<ContainerAllocator> const> ConstPtr;

}; // struct EditMotionRequest_

typedef ::play_motion_builder_msgs::EditMotionRequest_<std::allocator<void> > EditMotionRequest;

typedef boost::shared_ptr< ::play_motion_builder_msgs::EditMotionRequest > EditMotionRequestPtr;
typedef boost::shared_ptr< ::play_motion_builder_msgs::EditMotionRequest const> EditMotionRequestConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::play_motion_builder_msgs::EditMotionRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::play_motion_builder_msgs::EditMotionRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::play_motion_builder_msgs::EditMotionRequest_<ContainerAllocator1> & lhs, const ::play_motion_builder_msgs::EditMotionRequest_<ContainerAllocator2> & rhs)
{
  return lhs.step_id == rhs.step_id &&
    lhs.action == rhs.action &&
    lhs.time == rhs.time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::play_motion_builder_msgs::EditMotionRequest_<ContainerAllocator1> & lhs, const ::play_motion_builder_msgs::EditMotionRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace play_motion_builder_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::play_motion_builder_msgs::EditMotionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::play_motion_builder_msgs::EditMotionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::play_motion_builder_msgs::EditMotionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::play_motion_builder_msgs::EditMotionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::play_motion_builder_msgs::EditMotionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::play_motion_builder_msgs::EditMotionRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::play_motion_builder_msgs::EditMotionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "994d269af2f608a6b9a823b10da14d7d";
  }

  static const char* value(const ::play_motion_builder_msgs::EditMotionRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x994d269af2f608a6ULL;
  static const uint64_t static_value2 = 0xb9a823b10da14d7dULL;
};

template<class ContainerAllocator>
struct DataType< ::play_motion_builder_msgs::EditMotionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "play_motion_builder_msgs/EditMotionRequest";
  }

  static const char* value(const ::play_motion_builder_msgs::EditMotionRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::play_motion_builder_msgs::EditMotionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Definitions of actions\n"
"uint8 LIST=0\n"
"uint8 APPEND=1\n"
"uint8 EDIT=2\n"
"uint8 COPY_AS_NEXT=3\n"
"uint8 COPY_AS_LAST=4\n"
"uint8 REMOVE=5\n"
"uint8 EDIT_TIME=6\n"
"\n"
"# Step id for the step to which the action should be applied\n"
"uint16 step_id\n"
"# Action to execute\n"
"uint8 action\n"
"# Time to be set (only used if action is EDIT_TIME)\n"
"float32 time\n"
;
  }

  static const char* value(const ::play_motion_builder_msgs::EditMotionRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::play_motion_builder_msgs::EditMotionRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.step_id);
      stream.next(m.action);
      stream.next(m.time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EditMotionRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::play_motion_builder_msgs::EditMotionRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::play_motion_builder_msgs::EditMotionRequest_<ContainerAllocator>& v)
  {
    s << indent << "step_id: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.step_id);
    s << indent << "action: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.action);
    s << indent << "time: ";
    Printer<float>::stream(s, indent + "  ", v.time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLAY_MOTION_BUILDER_MSGS_MESSAGE_EDITMOTIONREQUEST_H
