// Generated by gencpp from file play_motion_builder_msgs/ListJointGroupsResponse.msg
// DO NOT EDIT!


#ifndef PLAY_MOTION_BUILDER_MSGS_MESSAGE_LISTJOINTGROUPSRESPONSE_H
#define PLAY_MOTION_BUILDER_MSGS_MESSAGE_LISTJOINTGROUPSRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace play_motion_builder_msgs
{
template <class ContainerAllocator>
struct ListJointGroupsResponse_
{
  typedef ListJointGroupsResponse_<ContainerAllocator> Type;

  ListJointGroupsResponse_()
    : groups()
    , additional_joints()
    , available_joints()  {
    }
  ListJointGroupsResponse_(const ContainerAllocator& _alloc)
    : groups(_alloc)
    , additional_joints(_alloc)
    , available_joints(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _groups_type;
  _groups_type groups;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _additional_joints_type;
  _additional_joints_type additional_joints;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _available_joints_type;
  _available_joints_type available_joints;





  typedef boost::shared_ptr< ::play_motion_builder_msgs::ListJointGroupsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::play_motion_builder_msgs::ListJointGroupsResponse_<ContainerAllocator> const> ConstPtr;

}; // struct ListJointGroupsResponse_

typedef ::play_motion_builder_msgs::ListJointGroupsResponse_<std::allocator<void> > ListJointGroupsResponse;

typedef boost::shared_ptr< ::play_motion_builder_msgs::ListJointGroupsResponse > ListJointGroupsResponsePtr;
typedef boost::shared_ptr< ::play_motion_builder_msgs::ListJointGroupsResponse const> ListJointGroupsResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::play_motion_builder_msgs::ListJointGroupsResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::play_motion_builder_msgs::ListJointGroupsResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::play_motion_builder_msgs::ListJointGroupsResponse_<ContainerAllocator1> & lhs, const ::play_motion_builder_msgs::ListJointGroupsResponse_<ContainerAllocator2> & rhs)
{
  return lhs.groups == rhs.groups &&
    lhs.additional_joints == rhs.additional_joints &&
    lhs.available_joints == rhs.available_joints;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::play_motion_builder_msgs::ListJointGroupsResponse_<ContainerAllocator1> & lhs, const ::play_motion_builder_msgs::ListJointGroupsResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace play_motion_builder_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::play_motion_builder_msgs::ListJointGroupsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::play_motion_builder_msgs::ListJointGroupsResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::play_motion_builder_msgs::ListJointGroupsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::play_motion_builder_msgs::ListJointGroupsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::play_motion_builder_msgs::ListJointGroupsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::play_motion_builder_msgs::ListJointGroupsResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::play_motion_builder_msgs::ListJointGroupsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9fdaed4e1eb95768801699335d06285a";
  }

  static const char* value(const ::play_motion_builder_msgs::ListJointGroupsResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9fdaed4e1eb95768ULL;
  static const uint64_t static_value2 = 0x801699335d06285aULL;
};

template<class ContainerAllocator>
struct DataType< ::play_motion_builder_msgs::ListJointGroupsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "play_motion_builder_msgs/ListJointGroupsResponse";
  }

  static const char* value(const ::play_motion_builder_msgs::ListJointGroupsResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::play_motion_builder_msgs::ListJointGroupsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# List of available groups\n"
"string[] groups\n"
"# List of joints not in any group\n"
"string[] additional_joints\n"
"# Complete list of joints (including those in a group)\n"
"string[] available_joints\n"
"\n"
;
  }

  static const char* value(const ::play_motion_builder_msgs::ListJointGroupsResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::play_motion_builder_msgs::ListJointGroupsResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.groups);
      stream.next(m.additional_joints);
      stream.next(m.available_joints);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ListJointGroupsResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::play_motion_builder_msgs::ListJointGroupsResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::play_motion_builder_msgs::ListJointGroupsResponse_<ContainerAllocator>& v)
  {
    s << indent << "groups[]" << std::endl;
    for (size_t i = 0; i < v.groups.size(); ++i)
    {
      s << indent << "  groups[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.groups[i]);
    }
    s << indent << "additional_joints[]" << std::endl;
    for (size_t i = 0; i < v.additional_joints.size(); ++i)
    {
      s << indent << "  additional_joints[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.additional_joints[i]);
    }
    s << indent << "available_joints[]" << std::endl;
    for (size_t i = 0; i < v.available_joints.size(); ++i)
    {
      s << indent << "  available_joints[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.available_joints[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLAY_MOTION_BUILDER_MSGS_MESSAGE_LISTJOINTGROUPSRESPONSE_H
