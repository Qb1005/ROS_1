// Generated by gencpp from file play_motion_builder_msgs/Motion.msg
// DO NOT EDIT!


#ifndef PLAY_MOTION_BUILDER_MSGS_MESSAGE_MOTION_H
#define PLAY_MOTION_BUILDER_MSGS_MESSAGE_MOTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <play_motion_builder_msgs/Frame.h>

namespace play_motion_builder_msgs
{
template <class ContainerAllocator>
struct Motion_
{
  typedef Motion_<ContainerAllocator> Type;

  Motion_()
    : joints()
    , keyframes()
    , used_group()  {
    }
  Motion_(const ContainerAllocator& _alloc)
    : joints(_alloc)
    , keyframes(_alloc)
    , used_group(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _joints_type;
  _joints_type joints;

   typedef std::vector< ::play_motion_builder_msgs::Frame_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::play_motion_builder_msgs::Frame_<ContainerAllocator> >::other >  _keyframes_type;
  _keyframes_type keyframes;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _used_group_type;
  _used_group_type used_group;





  typedef boost::shared_ptr< ::play_motion_builder_msgs::Motion_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::play_motion_builder_msgs::Motion_<ContainerAllocator> const> ConstPtr;

}; // struct Motion_

typedef ::play_motion_builder_msgs::Motion_<std::allocator<void> > Motion;

typedef boost::shared_ptr< ::play_motion_builder_msgs::Motion > MotionPtr;
typedef boost::shared_ptr< ::play_motion_builder_msgs::Motion const> MotionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::play_motion_builder_msgs::Motion_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::play_motion_builder_msgs::Motion_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::play_motion_builder_msgs::Motion_<ContainerAllocator1> & lhs, const ::play_motion_builder_msgs::Motion_<ContainerAllocator2> & rhs)
{
  return lhs.joints == rhs.joints &&
    lhs.keyframes == rhs.keyframes &&
    lhs.used_group == rhs.used_group;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::play_motion_builder_msgs::Motion_<ContainerAllocator1> & lhs, const ::play_motion_builder_msgs::Motion_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace play_motion_builder_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::play_motion_builder_msgs::Motion_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::play_motion_builder_msgs::Motion_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::play_motion_builder_msgs::Motion_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::play_motion_builder_msgs::Motion_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::play_motion_builder_msgs::Motion_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::play_motion_builder_msgs::Motion_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::play_motion_builder_msgs::Motion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0cd6cb21dc200c52ee3c8d281eccf636";
  }

  static const char* value(const ::play_motion_builder_msgs::Motion_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0cd6cb21dc200c52ULL;
  static const uint64_t static_value2 = 0xee3c8d281eccf636ULL;
};

template<class ContainerAllocator>
struct DataType< ::play_motion_builder_msgs::Motion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "play_motion_builder_msgs/Motion";
  }

  static const char* value(const ::play_motion_builder_msgs::Motion_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::play_motion_builder_msgs::Motion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# List of joint names, keyframe positions are ordered based on this list\n"
"string[] joints\n"
"# List of Frames\n"
"play_motion_builder_msgs/Frame[] keyframes\n"
"# Name of the joint group used during this motion\n"
"string used_group\n"
"\n"
"================================================================================\n"
"MSG: play_motion_builder_msgs/Frame\n"
"# Array with joint poses\n"
"float64[] pose\n"
"# Time since last Frame\n"
"float32 time_from_last\n"
;
  }

  static const char* value(const ::play_motion_builder_msgs::Motion_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::play_motion_builder_msgs::Motion_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joints);
      stream.next(m.keyframes);
      stream.next(m.used_group);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Motion_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::play_motion_builder_msgs::Motion_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::play_motion_builder_msgs::Motion_<ContainerAllocator>& v)
  {
    s << indent << "joints[]" << std::endl;
    for (size_t i = 0; i < v.joints.size(); ++i)
    {
      s << indent << "  joints[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.joints[i]);
    }
    s << indent << "keyframes[]" << std::endl;
    for (size_t i = 0; i < v.keyframes.size(); ++i)
    {
      s << indent << "  keyframes[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::play_motion_builder_msgs::Frame_<ContainerAllocator> >::stream(s, indent + "    ", v.keyframes[i]);
    }
    s << indent << "used_group: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.used_group);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLAY_MOTION_BUILDER_MSGS_MESSAGE_MOTION_H
