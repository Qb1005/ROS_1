// Generated by gencpp from file play_motion_builder_msgs/Frame.msg
// DO NOT EDIT!


#ifndef PLAY_MOTION_BUILDER_MSGS_MESSAGE_FRAME_H
#define PLAY_MOTION_BUILDER_MSGS_MESSAGE_FRAME_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace play_motion_builder_msgs
{
template <class ContainerAllocator>
struct Frame_
{
  typedef Frame_<ContainerAllocator> Type;

  Frame_()
    : pose()
    , time_from_last(0.0)  {
    }
  Frame_(const ContainerAllocator& _alloc)
    : pose(_alloc)
    , time_from_last(0.0)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _pose_type;
  _pose_type pose;

   typedef float _time_from_last_type;
  _time_from_last_type time_from_last;





  typedef boost::shared_ptr< ::play_motion_builder_msgs::Frame_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::play_motion_builder_msgs::Frame_<ContainerAllocator> const> ConstPtr;

}; // struct Frame_

typedef ::play_motion_builder_msgs::Frame_<std::allocator<void> > Frame;

typedef boost::shared_ptr< ::play_motion_builder_msgs::Frame > FramePtr;
typedef boost::shared_ptr< ::play_motion_builder_msgs::Frame const> FrameConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::play_motion_builder_msgs::Frame_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::play_motion_builder_msgs::Frame_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::play_motion_builder_msgs::Frame_<ContainerAllocator1> & lhs, const ::play_motion_builder_msgs::Frame_<ContainerAllocator2> & rhs)
{
  return lhs.pose == rhs.pose &&
    lhs.time_from_last == rhs.time_from_last;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::play_motion_builder_msgs::Frame_<ContainerAllocator1> & lhs, const ::play_motion_builder_msgs::Frame_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace play_motion_builder_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::play_motion_builder_msgs::Frame_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::play_motion_builder_msgs::Frame_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::play_motion_builder_msgs::Frame_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::play_motion_builder_msgs::Frame_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::play_motion_builder_msgs::Frame_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::play_motion_builder_msgs::Frame_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::play_motion_builder_msgs::Frame_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2e413d8203e397a420aef72e551374ab";
  }

  static const char* value(const ::play_motion_builder_msgs::Frame_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2e413d8203e397a4ULL;
  static const uint64_t static_value2 = 0x20aef72e551374abULL;
};

template<class ContainerAllocator>
struct DataType< ::play_motion_builder_msgs::Frame_<ContainerAllocator> >
{
  static const char* value()
  {
    return "play_motion_builder_msgs/Frame";
  }

  static const char* value(const ::play_motion_builder_msgs::Frame_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::play_motion_builder_msgs::Frame_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Array with joint poses\n"
"float64[] pose\n"
"# Time since last Frame\n"
"float32 time_from_last\n"
;
  }

  static const char* value(const ::play_motion_builder_msgs::Frame_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::play_motion_builder_msgs::Frame_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pose);
      stream.next(m.time_from_last);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Frame_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::play_motion_builder_msgs::Frame_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::play_motion_builder_msgs::Frame_<ContainerAllocator>& v)
  {
    s << indent << "pose[]" << std::endl;
    for (size_t i = 0; i < v.pose.size(); ++i)
    {
      s << indent << "  pose[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.pose[i]);
    }
    s << indent << "time_from_last: ";
    Printer<float>::stream(s, indent + "  ", v.time_from_last);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLAY_MOTION_BUILDER_MSGS_MESSAGE_FRAME_H
