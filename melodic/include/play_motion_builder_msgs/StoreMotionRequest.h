// Generated by gencpp from file play_motion_builder_msgs/StoreMotionRequest.msg
// DO NOT EDIT!


#ifndef PLAY_MOTION_BUILDER_MSGS_MESSAGE_STOREMOTIONREQUEST_H
#define PLAY_MOTION_BUILDER_MSGS_MESSAGE_STOREMOTIONREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <play_motion_builder_msgs/Meta.h>

namespace play_motion_builder_msgs
{
template <class ContainerAllocator>
struct StoreMotionRequest_
{
  typedef StoreMotionRequest_<ContainerAllocator> Type;

  StoreMotionRequest_()
    : file_path()
    , ros_name()
    , meta()  {
    }
  StoreMotionRequest_(const ContainerAllocator& _alloc)
    : file_path(_alloc)
    , ros_name(_alloc)
    , meta(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _file_path_type;
  _file_path_type file_path;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _ros_name_type;
  _ros_name_type ros_name;

   typedef  ::play_motion_builder_msgs::Meta_<ContainerAllocator>  _meta_type;
  _meta_type meta;





  typedef boost::shared_ptr< ::play_motion_builder_msgs::StoreMotionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::play_motion_builder_msgs::StoreMotionRequest_<ContainerAllocator> const> ConstPtr;

}; // struct StoreMotionRequest_

typedef ::play_motion_builder_msgs::StoreMotionRequest_<std::allocator<void> > StoreMotionRequest;

typedef boost::shared_ptr< ::play_motion_builder_msgs::StoreMotionRequest > StoreMotionRequestPtr;
typedef boost::shared_ptr< ::play_motion_builder_msgs::StoreMotionRequest const> StoreMotionRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::play_motion_builder_msgs::StoreMotionRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::play_motion_builder_msgs::StoreMotionRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::play_motion_builder_msgs::StoreMotionRequest_<ContainerAllocator1> & lhs, const ::play_motion_builder_msgs::StoreMotionRequest_<ContainerAllocator2> & rhs)
{
  return lhs.file_path == rhs.file_path &&
    lhs.ros_name == rhs.ros_name &&
    lhs.meta == rhs.meta;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::play_motion_builder_msgs::StoreMotionRequest_<ContainerAllocator1> & lhs, const ::play_motion_builder_msgs::StoreMotionRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace play_motion_builder_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::play_motion_builder_msgs::StoreMotionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::play_motion_builder_msgs::StoreMotionRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::play_motion_builder_msgs::StoreMotionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::play_motion_builder_msgs::StoreMotionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::play_motion_builder_msgs::StoreMotionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::play_motion_builder_msgs::StoreMotionRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::play_motion_builder_msgs::StoreMotionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e011623bacdee6d99901579b964c8623";
  }

  static const char* value(const ::play_motion_builder_msgs::StoreMotionRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe011623bacdee6d9ULL;
  static const uint64_t static_value2 = 0x9901579b964c8623ULL;
};

template<class ContainerAllocator>
struct DataType< ::play_motion_builder_msgs::StoreMotionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "play_motion_builder_msgs/StoreMotionRequest";
  }

  static const char* value(const ::play_motion_builder_msgs::StoreMotionRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::play_motion_builder_msgs::StoreMotionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Path to where the file should be stored (if wmpty no file is stored)\n"
"string file_path\n"
"# Parameter name assigned to the motion\n"
"string ros_name\n"
"# Metadata of the motion\n"
"play_motion_builder_msgs/Meta meta\n"
"\n"
"================================================================================\n"
"MSG: play_motion_builder_msgs/Meta\n"
"# Human-readable name for the motion\n"
"string name\n"
"# Keywords to identify purpose of the motion\n"
"string usage\n"
"# Short description of the motion\n"
"string description\n"
;
  }

  static const char* value(const ::play_motion_builder_msgs::StoreMotionRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::play_motion_builder_msgs::StoreMotionRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.file_path);
      stream.next(m.ros_name);
      stream.next(m.meta);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StoreMotionRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::play_motion_builder_msgs::StoreMotionRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::play_motion_builder_msgs::StoreMotionRequest_<ContainerAllocator>& v)
  {
    s << indent << "file_path: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.file_path);
    s << indent << "ros_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.ros_name);
    s << indent << "meta: ";
    s << std::endl;
    Printer< ::play_motion_builder_msgs::Meta_<ContainerAllocator> >::stream(s, indent + "  ", v.meta);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLAY_MOTION_BUILDER_MSGS_MESSAGE_STOREMOTIONREQUEST_H
