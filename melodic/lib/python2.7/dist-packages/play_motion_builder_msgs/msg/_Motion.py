# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from play_motion_builder_msgs/Motion.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import play_motion_builder_msgs.msg

class Motion(genpy.Message):
  _md5sum = "0cd6cb21dc200c52ee3c8d281eccf636"
  _type = "play_motion_builder_msgs/Motion"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# List of joint names, keyframe positions are ordered based on this list
string[] joints
# List of Frames
play_motion_builder_msgs/Frame[] keyframes
# Name of the joint group used during this motion
string used_group

================================================================================
MSG: play_motion_builder_msgs/Frame
# Array with joint poses
float64[] pose
# Time since last Frame
float32 time_from_last"""
  __slots__ = ['joints','keyframes','used_group']
  _slot_types = ['string[]','play_motion_builder_msgs/Frame[]','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       joints,keyframes,used_group

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Motion, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.joints is None:
        self.joints = []
      if self.keyframes is None:
        self.keyframes = []
      if self.used_group is None:
        self.used_group = ''
    else:
      self.joints = []
      self.keyframes = []
      self.used_group = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.joints)
      buff.write(_struct_I.pack(length))
      for val1 in self.joints:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.keyframes)
      buff.write(_struct_I.pack(length))
      for val1 in self.keyframes:
        length = len(val1.pose)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*val1.pose))
        _x = val1.time_from_last
        buff.write(_get_struct_f().pack(_x))
      _x = self.used_group
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.keyframes is None:
        self.keyframes = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.joints = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.joints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.keyframes = []
      for i in range(0, length):
        val1 = play_motion_builder_msgs.msg.Frame()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.pose = s.unpack(str[start:end])
        start = end
        end += 4
        (val1.time_from_last,) = _get_struct_f().unpack(str[start:end])
        self.keyframes.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.used_group = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.used_group = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.joints)
      buff.write(_struct_I.pack(length))
      for val1 in self.joints:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.keyframes)
      buff.write(_struct_I.pack(length))
      for val1 in self.keyframes:
        length = len(val1.pose)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.pose.tostring())
        _x = val1.time_from_last
        buff.write(_get_struct_f().pack(_x))
      _x = self.used_group
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.keyframes is None:
        self.keyframes = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.joints = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.joints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.keyframes = []
      for i in range(0, length):
        val1 = play_motion_builder_msgs.msg.Frame()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.pose = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (val1.time_from_last,) = _get_struct_f().unpack(str[start:end])
        self.keyframes.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.used_group = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.used_group = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
