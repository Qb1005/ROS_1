# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from play_motion_builder_msgs/RunMotionGoal.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RunMotionGoal(genpy.Message):
  _md5sum = "93fd2cd7e64669cfb4a792f5ad9e13ef"
  _type = "play_motion_builder_msgs/RunMotionGoal"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Motion modes
uint8 RUN_MOTION=0
uint8 GO_TO_STEP=1

uint8 run_mode
# Factor by which to slow down the motion (only used if run_mode is RUN_MOTION)
float32 downshift
# Step id to which the robot will be moved (only used if run_mode is GO_TO_STEP)
uint16 step_id
"""
  # Pseudo-constants
  RUN_MOTION = 0
  GO_TO_STEP = 1

  __slots__ = ['run_mode','downshift','step_id']
  _slot_types = ['uint8','float32','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       run_mode,downshift,step_id

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RunMotionGoal, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.run_mode is None:
        self.run_mode = 0
      if self.downshift is None:
        self.downshift = 0.
      if self.step_id is None:
        self.step_id = 0
    else:
      self.run_mode = 0
      self.downshift = 0.
      self.step_id = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_BfH().pack(_x.run_mode, _x.downshift, _x.step_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 7
      (_x.run_mode, _x.downshift, _x.step_id,) = _get_struct_BfH().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_BfH().pack(_x.run_mode, _x.downshift, _x.step_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 7
      (_x.run_mode, _x.downshift, _x.step_id,) = _get_struct_BfH().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_BfH = None
def _get_struct_BfH():
    global _struct_BfH
    if _struct_BfH is None:
        _struct_BfH = struct.Struct("<BfH")
    return _struct_BfH
